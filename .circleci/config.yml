version: 2.1

commands:
  destroy_environment:
    parameters:
      workflow_id:
        type: string
      event:
        type: string
    steps:
      - run:
          when: << parameters.event >>
          name: Destroy front end
          command: |
            aws s3 rm s3://udapeople-udapeople-<< parameters.workflow_id >> --recursive
            aws cloudformation delete-stack --stack-name "frontend-udapeople-<< parameters.workflow_id >>"
      - run:
          when: << parameters.event >>
          name: Destroy back end
          command: |
            aws cloudformation delete-stack --stack-name "backend-udapeople-<< parameters.workflow_id >>"
      - run:
          when: << parameters.event >>
          name: Destroy network
          command: |
            aws cloudformation delete-stack --stack-name "network-udapeople-<< parameters.workflow_id >>"
  rollback-migrations:
    description: Roll back migrations
    parameters:
      workflow_id:
        type: string
      event:
        type: string
    steps:
      - attach_workspace:
          at: ~/project/backend
      - run:
          name: Revert migrations
          when: << parameters.event >>
          command: cd backend && npm i && npm run build && npm run migrations:revert
      - destroy_environment:
          workflow_id: << parameters.workflow_id >>
          event: << parameters.event >>
jobs:
  build-frontend:
    docker:
      - image: circleci/node:12
    steps:
      - checkout
      - run:
          name: Install front end node modules
          command: |
            cd frontend
            npm install
      - run:
          name: Build front end code
          command: |
            cd frontend
            npm run build

  test-frontend:
    docker:
      - image: circleci/node:12
    steps:
      - checkout
      - run:
          name: Install front end node modules
          command: |
            cd frontend
            npm install
      - run:
          name: Run tests with JUnit as reporter
          command: |
            cd frontend
            npm test
      - store_test_results:
          path: ./reports/junit/
      - store_artifacts:
          path: ./reports/junit
  audit-check-frontend:
    docker:
      - image: circleci/node:12
    steps:
      - checkout
      - run:
          name: Audit check front end code
          command: |
            cd frontend
      #       npm audit --audit-level=critical

  build-backend:
    docker:
      - image: circleci/node:12
    steps:
      - checkout
      - run:
          name: Install back end node modules
          command: |
            cd backend
            npm install
      - run:
          name: Build backend code
          command: |
            cd backend
            npm run build

  test-backend:
    docker:
      - image: circleci/node:12
    steps:
      - checkout
      - run:
          name: Install back end node modules
          command: |
            cd backend
            npm install
      - run:
          name: Run tests with JUnit as reporter
          command: |
            cd backend
            npm test
      - store_test_results:
          path: ./reports/junit/
      - store_artifacts:
          path: ./reports/junit

  audit-check-backend:
    docker:
      - image: circleci/node:12
    steps:
      - checkout
      - run:
          name: Audit check back end code
          command: |
            cd backend
          #   npm audit --audit-level=critical

  promote-prod:
    docker:
        - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name:  Promote production
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name "cloudfront-udapeople-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID}"

  create-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum -y install tar gzip
      - run:
          name: Create front end on aws
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "frontend-udapeople-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="udapeople-${CIRCLE_WORKFLOW_ID}"
      - run:
          name: Create backend infrastructure
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "backend-udapeople-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="udapeople-${CIRCLE_WORKFLOW_ID}"
      - run:
          name: Save backend URL
          command: |
            BACKEND_PUBLIC_DNS=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-udapeople-${CIRCLE_WORKFLOW_ID}" --query 'Reservations[*].Instances[*].PublicDnsName' --output text)
            curl -H "Content-Type: text/plain" -H "token: ${MEM_STASH_TOKEN}" --request PUT --data "${BACKEND_PUBLIC_DNS}" https://api.memstash.io/values/backend_dns
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-udapeople-${CIRCLE_WORKFLOW_ID}" --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            curl -H "Content-Type: text/plain" -H "token: ${MEM_STASH_TOKEN}" --request PUT --data "${BACKEND_PUBLIC_IP}" https://api.memstash.io/values/backend_ip
      - run:
          name: Add backend ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --filters "Name=tag:Name, Values=backend-udapeople-${CIRCLE_WORKFLOW_ID}" \
              --query 'Reservations[*].Instances[*].PublicDnsName' \
              --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # - run:
      #     name: Setup network on aws
      #     command: |
      #       aws cloudformation deploy \
      #         --template-file .circleci/files/network.yml \
      #         --stack-name "network-udapeople-${CIRCLE_WORKFLOW_ID}" \
      #         --parameter-overrides EnvironmentName="production"
      - destroy_environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID}
          event: on_fail

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["2b:38:c1:61:e2:bc:9a:6a:1a:a6:47:cb:d7:54:34:1a"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible && pip install awscli
      - run:
          name: Create env file
          command: |
            cd backend
            echo "ENVIRONMENT=production" > .env
            echo "NODE_ENV=production" >> .env
            echo "TYPEORM_CONNECTION=$TYPEORM_CONNECTION" >> .env
            echo "TYPEORM_ENTITIES=\"./src/modules/domain/**/*.entity.ts\"" >> .env
            echo "TYPEORM_HOST=$TYPEORM_HOST" >> .env
            echo "TYPEORM_PORT=$TYPEORM_PORT" >> .env
            echo "TYPEORM_USERNAME=$TYPEORM_USERNAME" >> .env
            echo "TYPEORM_PASSWORD=$TYPEORM_PASSWORD" >> .env
            echo "TYPEORM_DATABASE=$TYPEORM_DATABASE" >> .env

      - run: mkdir -p .circleci/ansible/roles/configure-server/files/source
      - run: cp -avr backend .circleci/ansible/roles/configure-server/files/source/
      - run:
          name: Install dependencies
          command:
            cd .circleci/ansible/ && ansible-playbook main.yml -i inventory.txt
      - destroy_environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID}
          event: on_fail
  run-migrations:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            pip install awscli && apk add --update nodejs npm
      - run: cd backend && npm i && npm run build && npm run migrations
      - rollback-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID}
          event: on_fail
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["2b:38:c1:61:e2:bc:9a:6a:1a:a6:47:cb:d7:54:34:1a"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible && pip install awscli && apk add --update nodejs npm

      - run:
          name: Install dependencies
          command:
            cd .circleci/ansible/ && ansible-playbook backend-deploy.yml -i inventory.txt
      - rollback-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID}
          event: on_fail

  deploy-frontend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["2b:38:c1:61:e2:bc:9a:6a:1a:a6:47:cb:d7:54:34:1a"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            pip install awscli && apk add --update nodejs npm curl
      - run:
          name: Build frontend
          command: |
            BACKEND_DNS=$(curl --request GET https://api.memstash.io/values/backend_dns -H "token: ${MEM_STASH_TOKEN}")
            echo 'export API_URL=$BACKEND_DNS' >> FRONT_END_ENV
            source FRONT_END_ENV
            cd frontend/
            npm i
            npm run build
            echo $API_URL
            aws s3 sync "dist/" s3://udapeople-udapeople-${CIRCLE_WORKFLOW_ID}
      - rollback-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID}
          event: on_fail

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run: pip install awscli && apk add --update nodejs npm curl
      # - run:
      #     name: Test Frontend
      #     command: |
      #       URL="http://frontend-udapeople-${CIRCLE_WORKFLOW_ID}.s3-website-us-east-1.amazonaws.com/#/employees"
      #       if curl -s ${URL} | grep "Welcome"
      #       then
      #       return 1
      #       else
      #       return 0
      #       fi
      - run:
          name: Test Backend
          command: |
            BACKEND_PUBLIC_IP=$(curl --request GET https://api.memstash.io/values/backend_ip -H "token: ${MEM_STASH_TOKEN}")
            curl "http://${BACKEND_PUBLIC_IP}:3030/api/status"
      - rollback-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID}
          event: on_fail

  get_last_deployment_id:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - run:
          command: |
            pip3 install awscli
      - run:
          name: Query previous ID
          command: |
            aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text > ~/old_workflow_id.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - old_workflow_id.txt
  clean_up_old_environment:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Print old id
          command: |
            cat ~/old_workflow_id.txt
      - run:
          name: Install aws cli
          command: |
            pip3 install awscli
      - run:
          name: Destroy old front end
          command: |
            aws s3 rm "s3://udapeople-$(cat ~/old_workflow_id.txt)" --recursive
            aws cloudformation delete-stack --stack-name "frontend-$(cat ~/old_workflow_id.txt)"
      - run:
          name: Destroy old back end
          command: |
            aws cloudformation delete-stack --stack-name "backend-$(cat ~/old_workflow_id.txt)"
      - run:
          name: Destroy old network
          command: |
            aws cloudformation delete-stack --stack-name "network-$(cat ~/old_workflow_id.txt)"
      - run:
          name: Destroy old cloudfront
          command: |
            aws cloudformation delete-stack --stack-name "cloudfront-$(cat ~/old_workflow_id.txt)"

workflows:
  my_workflow:
    jobs:
      # - build-frontend
      # - test-frontend:
      #     requires:
      #       - build-frontend
      # - audit-check-frontend:
      #     requires:
      #       - test-frontend
      # - build-backend:
      #     requires:
      #       - audit-check-frontend
      # - test-backend:
      #     requires:
      #       - build-backend
      # - audit-check-backend:
      #     requires:
      #       - test-backend

      - create-infrastructure:
          # requires:
          #   - audit-check-backend
          #   - audit-check-frontend
          filters:
            branches:
              only: master

      - configure-infrastructure:
          requires:
            - create-infrastructure
      - run-migrations:
          requires:
            - configure-infrastructure
      - deploy-backend:
          requires:
            - run-migrations
      - deploy-frontend:
          requires:
            - deploy-backend
      - smoke-test:
          requires:
            - deploy-frontend
      # - promote-prod:
      #     requires:
      #       - create-infrastructure
      # - get_last_deployment_id
      # - clean_up_old_environment:
      #     requires:
      #       - get_last_deployment_id
