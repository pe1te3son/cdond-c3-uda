version: 2.1

commands:
  destroy_environment:
    steps:
      - run:
          when: on_fail
          name: Destroy front end
          command: |
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID}"
      - run:
          when: on_fail
          name: Destroy back end
          command: |
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID}"
      - run:
          when: on_fail
          name: Destroy network
          command: |
            aws cloudformation delete-stack --stack-name "udapeople-network-${CIRCLE_WORKFLOW_ID}"
jobs:
  build-frontend:
    docker:
      - image: circleci/node:12
    steps:
      - checkout
      - run:
          name: Install front end node modules
          command: |
            cd frontend
            npm install
      - run:
          name: Build front end code
          command: |
            cd frontend
            npm run build

  test-frontend:
    docker:
      - image: circleci/node:12
    steps:
      - checkout
      - run:
          name: Install front end node modules
          command: |
            cd frontend
            npm install
      - run:
          name: Run tests with JUnit as reporter
          command: |
            cd frontend
            npm test
          environment:
            JEST_JUNIT_OUTPUT_DIR: ./reports/junit/
      - store_test_results:
          path: ./reports/junit/
      - store_artifacts:
          path: ./reports/junit
  audit-check-frontend:
    docker:
      - image: circleci/node:12
    steps:
      - checkout
      - run:
          name: Audit check front end code
          command: |
            cd frontend
            npm audit fix --audit-level=critical --force

  build-backend:
    docker:
      - image: circleci/node:12
    steps:
      - checkout
      - run:
          name: Install back end node modules
          command: |
            cd backend
            npm install
      - run:
          name: Build backend code
          command: |
            cd backend
            npm run build

  test-backend:
    docker:
      - image: circleci/node:12
    steps:
      - checkout
      - run:
          name: Install back end node modules
          command: |
            cd backend
            npm install
      - run:
          name: Run backend test script
          command: |
            cd backend
            npm run test

  audit-check-backend:
    docker:
      - image: circleci/node:12
    steps:
      - checkout
      - run:
          name: Audit check back end code
          command: |
            cd backend
            npm audit fix --audit-level=critical --force

  promote-prod:
    docker:
        - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name:  Promote production
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name "cloudfront-udapeople-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID}"

  create-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Create backend infrastructure
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "backend-udapeople-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="udapeople-${CIRCLE_WORKFLOW_ID}"
      - run:
          name: Create front end on aws
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "frontend-udapeople-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="udapeople-${CIRCLE_WORKFLOW_ID}"
      - run:
          name: Setup network on aws
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/network.yml \
              --stack-name "network-udapeople-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides EnvironmentName="production"
      - destroy_environment
  get_last_deployment_id:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - run:
          command: |
            pip3 install awscli
      - run:
          name: Query previous ID
          command: |
            aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text > ~/old_workflow_id.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - old_workflow_id.txt
  clean_up_old_environment:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Print old id
          command: |
            cat ~/old_workflow_id.txt
      - run:
          name: Install aws cli
          command: |
            pip3 install awscli
      - run:
          name: Destroy old front end
          command: |
            aws s3 rm "s3://udapeople-$(cat ~/old_workflow_id.txt)" --recursive
            aws cloudformation delete-stack --stack-name "frontend-$(cat ~/old_workflow_id.txt)"
      - run:
          name: Destroy old back end
          command: |
            aws cloudformation delete-stack --stack-name "backend-$(cat ~/old_workflow_id.txt)"
      - run:
          name: Destroy old network
          command: |
            aws cloudformation delete-stack --stack-name "network-$(cat ~/old_workflow_id.txt)"
      - run:
          name: Destroy old cloudfront
          command: |
            aws cloudformation delete-stack --stack-name "cloudfront-$(cat ~/old_workflow_id.txt)"

workflows:
  my_workflow:
    jobs:
      - build-frontend
      - test-frontend:
          requires:
            - build-frontend
      - audit-check-frontend:
          requires:
            - test-frontend
      - build-backend:
          requires:
            - audit-check-frontend
      - test-backend:
          requires:
            - build-backend
      - audit-check-backend:
          requires:
            - test-backend

      # - create-infrastructure
          # requires:
          #   - audit-check-backend
          #   - audit-check-frontend
      # - promote-prod:
      #     requires:
      #       - create-infrastructure
      # - get_last_deployment_id
      # - clean_up_old_environment:
      #     requires:
      #       - get_last_deployment_id
